import static TCDModUtils.getMixinFileNames;

plugins { id 'com.github.johnrengelman.shadow' }

architectury { platformSetupLoomIde(); fabric() }

configurations
{
	common { canBeResolved = true; canBeConsumed = false }

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle { canBeResolved = true; canBeConsumed = false }
}

repositories
{
	maven { url = "https://maven.terraformersmc.com/releases/" }
}

dependencies
{
	modImplementation "net.fabricmc:fabric-loader:${parent["fabric.loader_version"]}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${parent["fabric.api_version"]}"
	modImplementation "dev.architectury:architectury-fabric:${parent["architectury.version"]}"

	common(project(path: ':common', configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

	// Mod Menu
	modCompileOnlyApi "com.terraformersmc:modmenu:${parent["modmenu.version"]}"
}

processResources
{
	//obtain array of applicable mixin files, and turn it into string
	String mixins = (getMixinFileNames(project) + getMixinFileNames(project(":common")))
			.collect { "\"$it\"" }
			.join(',').with { "[$it]" }

	//expand root project properties to the 'fabric.mod.json' file
	filesMatching(["fabric.mod.json", "*.json"]) {
		expand(properties: [mixins: mixins] + parent.properties)
	}
}

shadowJar
{
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

remapJar { inputFile.set(shadowJar.archiveFile) }
